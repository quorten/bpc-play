diff -Nr -U5 lisp/dired-aux.el site-lisp/dired-aux.el
--- lisp/dired-aux.el	2007-02-02 09:51:08 +0000
+++ site-lisp/dired-aux.el	2013-03-23 00:31:04 +0000
@@ -32,14 +32,21 @@
 
 ;; Rewritten in 1990/1991 to add tree features, file marking and
 ;; sorting by Sebastian Kremer <sk@thp.uni-koeln.de>.
 ;; Finished up by rms in 1992.
 
+;; Patched by Andrew Makousky to include dired command logging as a
+;; series of shell script commands.  Note that due to the nature of
+;; dired, copy commands are always logged as "cp -pR".  Note that I
+;; intentionally left out support for logging symlinks due to the
+;; difficult structure of this code for that function.
+
 ;;; Code:
 
 ;; We need macros in dired.el to compile properly.
 (eval-when-compile (require 'dired))
+(require 'file-log)
 
 (defvar dired-create-files-failures nil
   "Variable where `dired-create-files' records failing file names.
 Functions that operate recursively can store additional names
 into this list; they also should call `dired-log' to log the errors.")
@@ -1149,11 +1156,14 @@
 
 ;;;###autoload
 (defun dired-copy-file (from to ok-flag)
   (dired-handle-overwrite to)
   (dired-copy-file-recursive from to ok-flag dired-copy-preserve-time t
-			     dired-recursive-copies))
+			     dired-recursive-copies)
+  ;; Add to dired log
+  (dired-log (concat "sh-cmd: cp -pR \""
+     (file-log-escape-specials from) "\" \"" (file-log-escape-specials to) "\"\n")))
 
 (defun dired-copy-file-recursive (from to ok-flag &optional
 				       preserve-time top recursive)
   (let ((attrs (file-attributes from))
 	dirfailed)
@@ -1216,11 +1226,14 @@
   (and (get-file-buffer file)
        (with-current-buffer (get-file-buffer file)
 	 (set-visited-file-name newname nil t)))
   (dired-remove-file file)
   ;; See if it's an inserted subdir, and rename that, too.
-  (dired-rename-subdir file newname))
+  (dired-rename-subdir file newname)
+  ;; Add to dired log
+  (dired-log (concat "sh-cmd: mv \""
+     (file-log-escape-specials from) "\" \"" (file-log-escape-specials to) "\"\n")))
 
 (defun dired-rename-subdir (from-dir to-dir)
   (setq from-dir (file-name-as-directory from-dir)
 	to-dir (file-name-as-directory to-dir))
   (dired-fun-in-all-buffers from-dir nil
@@ -1530,10 +1543,13 @@
   "Create a directory called DIRECTORY."
   (interactive
    (list (read-file-name "Create directory: " (dired-current-directory))))
   (let ((expanded (directory-file-name (expand-file-name directory))))
     (make-directory expanded)
+    ;; Add to dired log
+    (dired-log (concat "sh-cmd: mkdir \""
+		       (file-log-escape-specials directory) "\"\n"))
     (dired-add-file expanded)
     (dired-move-to-filename)))
 
 (defun dired-into-dir-with-symlinks (target)
   (and (file-directory-p target)
@@ -1606,11 +1622,14 @@
 (defun dired-hardlink (file newname &optional ok-if-already-exists)
   (dired-handle-overwrite newname)
   ;; error is caught in -create-files
   (add-name-to-file file newname ok-if-already-exists)
   ;; Update the link count
-  (dired-relist-file file))
+  (dired-relist-file file)
+  ;; Add to dired log
+  (dired-log (concat "sh-cmd: ln \"" (file-log-escape-specials file)
+		     "\" \"" (file-log-escape-specials newname) "\"\n")))
 
 ;;;###autoload
 (defun dired-do-rename (&optional arg)
   "Rename current file or all marked (or next ARG) files.
 When renaming just the current file, you specify the new name.
diff -Nr -U5 lisp/dired.el site-lisp/dired.el
--- lisp/dired.el	2007-05-31 20:57:40 +0000
+++ site-lisp/dired.el	2013-03-23 00:32:00 +0000
@@ -31,12 +31,19 @@
 
 ;; Rewritten in 1990/1991 to add tree features, file marking and
 ;; sorting by Sebastian Kremer <sk@thp.uni-koeln.de>.
 ;; Finished up by rms in 1992.
 
+;; Patched by Andrew Makousky to include dired command logging as a
+;; series of shell script commands.  Note that recursive directory
+;; deletes will only be logged correctly if you set
+;; dired-recursive-deletes to "Confirm for each top directory only".
+
 ;;; Code:
 
+(require 'file-log)
+
 ;;; Customizable variables
 
 (defgroup dired nil
   "Directory editing."
   :link '(custom-manual "(emacs)Dired")
@@ -2392,22 +2399,33 @@
   (let (files)
      ;; This test is equivalent to
      ;; (and (file-directory-p fn) (not (file-symlink-p fn)))
      ;; but more efficient
     (if (not (eq t (car (file-attributes file))))
+	(progn
 	(delete-file file)
+	(if (not (eq recursive 'always))
+	    (dired-log (concat "sh-cmd: rm \""
+			       (file-log-escape-specials file) "\"\n"))))
       (when (and recursive
 	       (setq files
 		     (directory-files file t dired-re-no-dot)) ; Not empty.
 	       (or (eq recursive 'always)
 		   (yes-or-no-p (format "Recursive delete of %s? "
 					(dired-make-relative file)))))
-	(if (eq recursive 'top) (setq recursive 'always)) ; Don't ask again.
+	(if (eq recursive 'top)
+	    (progn
+	      (setq recursive 'always) ; Don't ask again.
+	      (dired-log (concat "sh-cmd: rm -r \""
+				 (file-log-escape-specials file) "\"\n"))))
 	(while files		; Recursively delete (possibly asking).
 	    (dired-delete-file (car files) recursive)
 	    (setq files (cdr files))))
-      (delete-directory file))))
+      (delete-directory file)
+      (if (eq recursive nil)
+	  (dired-log (concat "sh-cmd: rmdir \""
+			     (file-log-escape-specials file) "\"\n"))))))
 
 (defun dired-do-flagged-delete (&optional nomessage)
   "In Dired, delete the files flagged for deletion.
 If NOMESSAGE is non-nil, we don't display any message
 if there are no flagged files.
@@ -3002,11 +3020,11 @@
 		 "%d marks removed")
 	       count))))
 
 ;; Logging failures operating on files, and showing the results.
 
-(defvar dired-log-buffer "*Dired log*")
+(defvar dired-log-buffer "~/dired-log.txt")
 
 (defun dired-why ()
   "Pop up a buffer with error log output from Dired.
 A group of errors from a single command ends with a formfeed.
 Thus, use \\[backward-page] to find the beginning of a group of errors."
@@ -3029,11 +3047,11 @@
   ;; those ARGS.  Usually the LOG string ends with a \n.
   ;; End each bunch of errors with (dired-log t):
   ;; this inserts the current time and buffer at the start of the page,
   ;; and \f (formfeed) at the end.
   (let ((obuf (current-buffer)))
-    (with-current-buffer (get-buffer-create dired-log-buffer)
+    (with-current-buffer (find-file-noselect dired-log-buffer)
       (goto-char (point-max))
       (let ((inhibit-read-only t))
 	(cond ((stringp log)
 	       (insert (if args
 			   (apply (function format) log args)
@@ -3054,11 +3072,11 @@
 STRING is an overall summary of the failures.
 FAILURES is a list of file names that we failed to operate on,
 or nil if file names are not applicable."
   (if (= (length failures) 1)
       (message "%s"
-	       (with-current-buffer dired-log-buffer
+	       (with-current-buffer (find-file-noselect dired-log-buffer)
 		 (goto-char (point-max))
 		 (backward-page 1)
 		 (if (eolp) (forward-line 1))
 		 (buffer-substring (point) (point-max))))
     (message (if failures "%s--type ? for details (%s)"
diff -Nr -U5 lisp/file-log.el site-lisp/file-log.el
--- lisp/file-log.el	1970-01-01 00:00:00 +0000
+++ site-lisp/file-log.el	2013-03-18 17:20:10 +0000
@@ -0,0 +1,112 @@
+;;; file-log.el --- hook functions for simple file logging
+
+;; This file is in public domain.
+
+;; Author: Andrew Makousky
+;; Created: 05 Jan 2012
+;; Version: 0.1
+;; Keywords: files log logging
+
+;;; Commentary:
+
+;; Sometimes I find it is useful to be able to track what files I
+;; modified since a certain date without having to search for these
+;; files or use a full-blown version cotrol system.  As long as you
+;; only edit files in Emacs, you can keep a list of every file that
+;; you have changed since the log was initially created by binding the
+;; function `file-log-save' to either `before-save-hook' or
+;; `after-save-hook'.
+
+;;; Code:
+
+(provide 'file-log)
+
+(defgroup file-log nil
+  "Simple logging of file changes."
+  :prefix 'file-log
+  :group 'files)
+
+(defcustom file-log-log-file "~/mod/emacs-rec.txt"
+  "Name of the file to write log entries to."
+  :group 'file-log
+  :type 'file)
+
+(defcustom file-log-cmd-syntax nil
+  "If `t', specifies that the file log should take the form of a
+series of touch commands.  If `nil', only file names will be
+written."
+  :group 'file-log
+  :type 'boolean)
+
+;;;###autoload
+(defun file-log-write ()
+  "Writes the current buffer's file name to a designated log file.
+If this is bound to `before-save-hook' or `after-save-hook', then
+the hooks are temporarily disabled when saving the log file."
+  (interactive)
+  (save-excursion
+    (let (log-buffer changed-buffer prev-before-hooks prev-after-hooks)
+      (setq changed-buffer (current-buffer))
+      (setq log-buffer (find-file-noselect file-log-log-file))
+      (set-buffer log-buffer)
+      (goto-char (point-max))
+      (if file-log-cmd-syntax
+	  (insert "sh-cmd: touch \""))
+      (insert (file-log-escape-specials (buffer-file-name changed-buffer)))
+      (if file-log-cmd-syntax
+	  (insert "\""))
+      (insert "\n")
+      ;; Before we save this buffer, we must make sure that this
+      ;; log-update hook is disabled.  Otherwise, we will get a problem of
+      ;; infinite recursion.  Either that, or we might be able to define a
+      ;; special mode in which we change the save hooks.
+      (setq prev-before-hooks before-save-hook)
+      (setq prev-after-hooks after-save-hook)
+      (customize-set-variable 'before-save-hook nil)
+      (customize-set-variable 'after-save-hook nil)
+      (save-buffer)
+      (customize-set-variable 'before-save-hook prev-before-hooks)
+      (customize-set-variable 'after-save-hook prev-after-hooks))))
+
+(defun file-log-disable ()
+  "Disables file logging while editing a file log.  You should
+always disable file logging before editing the file log in Emacs,
+otherwise annoying or bad things could happen.  This is merely a
+convenience function that assumes you do not have any other save
+hooks that you want to keep set while editing the file log."
+  (interactive)
+  (setq file-log-prev-before-hooks before-save-hook)
+  (setq file-log-prev-after-hooks after-save-hook)
+  (customize-set-variable 'before-save-hook nil)
+  (customize-set-variable 'after-save-hook nil))
+
+(defun file-log-enable ()
+  "Convenience function to enable the file log if you disabled it
+with `file-log-disable'."
+  (interactive)
+  (customize-set-variable 'before-save-hook file-log-prev-before-hooks)
+  (customize-set-variable 'after-save-hook file-log-prev-after-hooks))
+
+(defun file-log-escape-specials (file-name)
+  "Replaces each character that would be considered special
+inside of a shell double quote with an escape sequence."
+  (setq file-name (file-log-escape-char file-name "\\\\" "\\\\"))
+  (setq file-name (file-log-escape-char file-name "\"" "\\\""))
+  (setq file-name (file-log-escape-char file-name "\\$" "\\$"))
+  (setq file-name (file-log-escape-char file-name "`" "\\`"))
+  (setq file-name (file-log-escape-char file-name "\n" "${NL}")))
+
+(defun file-log-escape-char (string char escape)
+  "Replaces CHAR character with an escape sequence ESCAPE so that
+the STRING can be used in shell scripts.  Because CHAR will be
+used in `string-match', it must be escaped if it is special when
+used in a regular expression."
+  (let ((lastmatch 0))
+    (while (setq lastmatch (string-match char string lastmatch))
+      (setq string (replace-match escape nil t string))
+      (setq lastmatch (+ lastmatch (length escape)))))
+  string)
+
+;; (defun test-fmt-modtime ()
+;;   "Try displaying a buffer's modified time."
+;;   (format-time-string "%Y-%m-%d %H:%M:%S %z" (visited-file-modtime) nil))
