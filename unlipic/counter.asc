; Test a simple counter interactively using bits from the UART serial
; console as input.

NAND 50 50 51
NAND 50 51 52 ; Our always-one reference
NAND 52 52 53 ; Our always-zero reference
NAND 54 54 54 ; Our ring oscillator

; Copy 0x3 (0b0011) to the high nibble of our serial output.
; Remember, the least significant bit comes first.
NAND 53 53 12
NAND 53 53 13
NAND 52 52 14
NAND 52 52 15

; Copy zero-bits to the low-order nibble so that we can see only
; either 1 or 0.
NAND 52 52 09
NAND 52 52 10
NAND 52 52 11

; Drive the UART input clock using a ring oscillator.
NAND 54 54 16

; Drive the UART output clock using a ring oscillator.
NAND 54 54 17

; We must RESET our D flip-flops at the start of the simulation to
; kick them out of the forbidden state.
NAND 21 21 75

NAND 75 74 76
NAND 76 76 60 ; Data input (0)
NAND 52 52 77
NAND 75 77 61 ; Clock input (1)

; Important!  The input clock must be set to one for a reasonably long
; period of time before going back to zero (i.e. 5 gate-delay cycles),
; otherwise the SR flip-flop could enter the forbidden state.

; D flip-flop
; Inputs: 60 61
NAND 60 60 62
NAND 60 61 63
NAND 61 62 64
NAND 63 66 08 ; 65
NAND 64 08 66

; 8-gate signal delay circuit, used so that the SR flip-flop in our
; counter does not enter the forbidden state, which turns it into a
; ring oscillator in our 100% deterministic simulator.

; As a nice consequence, this also reduces the natural oscillation
; frequency of a 1-bit counter if the CLOCK input is wired to
; always-one.
NAND 66 66 67
NAND 67 67 68
NAND 68 68 69
NAND 69 69 70
NAND 70 70 71
NAND 71 71 72
NAND 72 72 73
NAND 73 73 74

; Cool!  So we've figured out how to generate our own clock signal
; using /almost/ entirely our own logic.  It's just that we must get
; some sort of RESET signal to get this whole thing started.  Of
; course we can't generate our own RESET signal, so that's okay.

; Unfortunately, the clock period is not perfectly symmetric either.

; 5-gate delay edge trigger circuit.
NAND 74 74 91
NAND 91 91 92
NAND 92 92 93
NAND 93 93 94
NAND 94 94 95
NAND 74 95 96
NAND 96 96 97
;NAND 97 97 08 ; Debug edge-trigger

; Hooray!  We've completed demonstrating a simple 1-bit counter that
; actually works!  Now we can demonstrate a 3-bit synchronous counter.
; Unfortunately it is very difficult to get the timing right to build
; a correct asynchronous counter.  Again, remember to pipe in the
; RESET signal to each flip-flop so that we kick ourselves out of the
; forbidden state.
